module.exports = {
	env: {
		es6: true,
	},
	extends: [
		'plugin:@typescript-eslint/recommended',
		'plugin:@typescript-eslint/recommended-requiring-type-checking',
		'plugin:react/recommended',
	],
	parser: '@typescript-eslint/parser',
	parserOptions: {
		project: 'tsconfig.json',
		sourceType: 'module',
	},
	plugins: ['@typescript-eslint', '@typescript-eslint/eslint-plugin', 'unused-imports'],
	rules: {
		'unused-imports/no-unused-imports': 'error',
		'@typescript-eslint/array-type': 'error',
		'@typescript-eslint/indent': 'off',
		'@typescript-eslint/member-delimiter-style': [
			'off',
			{
				multiline: {
					delimiter: 'none',
					requireLast: true,
				},
				singleline: {
					delimiter: 'semi',
					requireLast: false,
				},
			},
		],
		'@typescript-eslint/naming-convention': [
			'error',
			{
				selector: 'interface',
				format: ['PascalCase'],
				custom: {
					regex: '^I[A-Z]',
					match: true,
				},
			},
		],
		'@typescript-eslint/no-empty-function': 'off',
		'@typescript-eslint/no-empty-interface': 'off',
		'@typescript-eslint/no-explicit-any': 'off',
		'@typescript-eslint/no-use-before-define': 'off',
		'@typescript-eslint/prefer-for-of': 'error',
		'@typescript-eslint/prefer-function-type': 'error',
		'@typescript-eslint/quotes': 'off',
		'@typescript-eslint/semi': ['off', null],
		'@typescript-eslint/unified-signatures': 'error',
		'@typescript-eslint/explicit-function-return-type': 'off',
		'@typescript-eslint/no-unused-vars': 'off',
		'@typescript-eslint/camelcase': 'off',
		'@typescript-eslint/no-non-null-assertion': 'error',
		'@typescript-eslint/no-unsafe-member-access': 'off',
		'@typescript-eslint/no-unsafe-return': 'off',
		'@typescript-eslint/no-unsafe-assignment': 'off',
		'@typescript-eslint/no-unsafe-call': 'error',
		'@typescript-eslint/restrict-template-expressions': 'off',
        "@typescript-eslint/no-unsafe-argument": "off",
		'@typescript-eslint/no-misused-promises': [
			'error',
			{
				checksVoidReturn: false,
			},
		],
		'@typescript-eslint/ban-ts-ignore': 'off',
		'@typescript-eslint/no-inferrable-types': 'off',
		'arrow-parens': ['off', 'as-needed'],
		camelcase: 'off',
		'comma-dangle': 'off',
		complexity: 'off',
		'constructor-super': 'error',
		'dot-notation': 'error',
		'eol-last': ['error', 'always'],
		eqeqeq: ['error', 'smart'],
		'guard-for-in': 'error',
		'id-blacklist': 'off',
		'id-match': 'error',
		'import/order': 'off',
		'max-classes-per-file': ['error', 1],
		'max-len': 'off',
		'new-parens': 'off',
		'newline-per-chained-call': 'off',
		'no-bitwise': 'off',
		'no-caller': 'error',
		'no-cond-assign': 'error',
		'no-console': 'warn',
		'no-debugger': 'error',
		'no-empty': 'off',
		'no-eval': 'error',
		'no-extra-semi': 'off',
		'no-invalid-this': 'off',
		'no-irregular-whitespace': 'off',
		'no-multiple-empty-lines': 'off',
		'no-new-wrappers': 'error',
		'no-shadow': [
			'off',
			{
				hoist: 'all',
			},
		],
		'no-throw-literal': 'error',
		'no-undef-init': 'error',
		'no-underscore-dangle': 'off',
		'no-unsafe-finally': 'off',
		'no-unused-expressions': 'off',
		'no-unused-labels': 'error',
		'object-shorthand': 'error',
		'one-var': ['error', 'never'],
		'prefer-arrow/prefer-arrow-functions': 'off',
		'quote-props': 'off',
		radix: 'error',
		'react/prop-types': 'off',
		'react/jsx-key': 'error',
		'react/display-name': 'off',
		'react/no-string-refs': 'off',
		'space-before-function-paren': 'off',
		'space-in-parens': ['off', 'never'],
		'spaced-comment': 'error',
		'use-isnan': 'error',
		'prefer-rest-params': 'off',
		'react/jsx-curly-brace-presence': ['error', { props: 'never', children: 'never' }],
		'require-await': 'off',
		'@typescript-eslint/require-await': 'error',
	},
	ignorePatterns: ['node_modules', 'hcl/**', 'scripts/**'],
	settings: {
		react: {
			createClass: 'createReactClass', // Regex for Component Factory to use,
			// default to "createReactClass"
			pragma: 'React', // Pragma to use, default to "React"
			version: 'detect', // React version. "detect" automatically picks the version you have installed.
			// You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
			// default to latest and warns if missing
			// It will default to "detect" in the future
			// flowVersion: '0.53', // Flow version
		},
	},
};
